{
	"info": {
		"_postman_id": "636e2ce4-b0d2-45f2-a4b0-0073add78825",
		"name": "ShipIt",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31080886"
	},
	"item": [
		{
			"name": "Actuator",
			"item": [
				{
					"name": "Health",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/actuator/health",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error cases",
			"item": [
				{
					"name": "Unauthorized endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/abc",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"abc"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create OAuth Client",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"{{shipItClientId}}\",\n    \"clientSecret\": \"{{shipItClientSecret}}\",\n    \"clientName\": \"Ship-It Client\",\n    \"authorizationGrantTypes\": [\n        \"AUTHORIZATION_CODE\",\n        \"REFRESH_TOKEN\",\n        \"CLIENT_CREDENTIALS\"\n    ],\n    \"redirectUri\": \"http://127.0.0.1/ship-it-auth-code\",\n    \"scopes\": [\n        {{shipItClientScopesCreateRequest}}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authServiceUrl}}/api/v1/oauth-clients",
							"host": [
								"{{authServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"oauth-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"userId\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"shipit@email.com\",\n    \"password\": \"test\",\n    \"name\": \"Shipping Company\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authServiceUrl}}/api/v1/users",
							"host": [
								"{{authServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Create product error case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"  \",\n    \"volume\": 0,\n    \"price\": 0,\n    \"countInStock\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"productId\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Product with 8 volume and 15$\",\n    \"volume\": 8,\n    \"price\": 15,\n    \"countInStock\": 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products error case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products?page=-1&size=0",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products/4716f120-6e0d-445f-b5e9-16128077cd0f",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products",
								"4716f120-6e0d-445f-b5e9-16128077cd0f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products/{{productId}}",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product error case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"countInStock\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products/{{productId}}",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"countInStock\": 17\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products/{{productId}}",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products/4716f120-6e0d-445f-b5e9-16128077cd0f",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products",
								"4716f120-6e0d-445f-b5e9-16128077cd0f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/products/{{productId}}",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transporter",
			"item": [
				{
					"name": "Create transporter error case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"  \",\n    \"capacity\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create transporter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"transporterId\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Transporter with 150 capacity\",\n    \"capacity\": 150\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transpoters error case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters?page=-1&size=0",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters"
							],
							"query": [
								{
									"key": "page",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transporters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transporters by ID not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters/4716f120-6e0d-445f-b5e9-16128077cd0f",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters",
								"4716f120-6e0d-445f-b5e9-16128077cd0f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transporters by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters/{{transporterId}}",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters",
								"{{transporterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete transporter not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters/4716f120-6e0d-445f-b5e9-16128077cd0f",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters",
								"4716f120-6e0d-445f-b5e9-16128077cd0f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete transporter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{shipItServiceUrl}}/api/v1/users/{{userId}}/transporters/{{transporterId}}",
							"host": [
								"{{shipItServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"transporters",
								"{{transporterId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "{{shipItClientScopes}}",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "http://127.0.0.1/ship-it-auth-code",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{shipItClientSecret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{shipItClientId}}",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "Ship It token",
				"type": "string"
			},
			{
				"key": "refreshRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "tokenRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "authRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{authServiceUrl}}/oauth2/authorize",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{authServiceUrl}}/oauth2/token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}